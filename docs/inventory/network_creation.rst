================
Network Creation
================

The network topology can be created in two different ways:

From the UI
-----------

By filling a form in :guilabel:`Inventory / Devices` and :guilabel:`Inventory / Links`.

.. note:: Some properties are mandatory:
 - Name: objects are uniquely defined by their name.
 - Source and destination: a link needs a source and a destination to be created.

.. note:: In order to visualize the network topology on a map,
  devices must have geographical coordinates (longitude and latitude).

From an Excel spreadsheet
-------------------------

Objects can be created all at once by importing an Excel spreadsheet in :guilabel:`Admin / Administration`,
section ``Topology Import``.
You can find examples of such spreadsheets in ``files`` / ``spreadsheets``. Y

.. note:: You can export an Excel spreadsheet containing the network topology by clicking on the ``Export`` button in the ``Topology Export`` column.
.. note:: If an imported object already exists, its properties will be updated.

Querying an external API
------------------------

Another way to create your network is to query an external API: OpenNMS, Netbox, or LibreNMS.
This can be done from :guilabel:`Admin / Administration`, column "Topology Import".

OpenNMS
*******

 * REST API: URL of the REST API
 * Devices: URL of the devices that you want to import (this could be a subset of all available devices in the API, like ``https://demo.opennms.org/opennms/rest/nodes?foreignSource=OpenNMS_ATL``)
 * Credentials of the REST API.

Netbox
******

 * Address: address of the server where Netbox is installed.
 * Token: token generated by Netbox. to use the API.

LibreNMS
********

 * Address: address of the server where LibreNMS is installed.
 * Token: token required by LibreNMS to use the API (generated by LibreNMS).

Custom properties
-----------------

It is possible to create custom properties for devices.
There are four types of properties that you can add: string, integer, float, and boolean.

Custom properties are read from a YAML file when eNMS starts.
The YAML file must have the following format:

::

 property1:
   pretty_name: Property 1
   type: integer
   default: 4
   add_to_dashboard: False
 property2:
   pretty_name: Property 2
   type: string
   default: "10.145.14.1"
   add_to_dashboard: True
   is_address: True

This YAML file will create two properties:

- "property1": an integer property defaulting to 4, displayed "Property 1" in the GUI.
- "property2": a string property defaulting to "a" displayed "Property 2" in the GUI.

If you want the custom property to appear in the dashboard, set ``add_to_dashboard`` to ``True`` in the YaML file.
The ``pretty_name`` is the name of the property in the web UI.

If you want the custom property to appear as a choice in the GoTTY Web SSH window (e.g if the property is a hostname or an IP address, and you want GoTTY to use it for SSH or Telnet), you can set ``is_address`` to True.

.. note:: You can find examples of YAML files with custom propertyes in :guilabel:`eNMS/tests/custom_properties`.

For eNMS to know where the file with custom properties is located on the server, 
you must set the ``custom_properties`` configuration variable to the path of the YAML file.
