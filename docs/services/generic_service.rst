===============
Generic Service
===============

eNMS automatically converts a service class into a form in the web UI. The fields of the form are automatically generated by inspecting the SQL parameters of the class.
This system only makes sense if multiple instances with different parameters of the same service are to be created.

Another use-case is to implement a service that will only exist as a single instance, and therefore does not need any variable parameter.
This can be done with the ``Generic Service``.

A "Generic Service" has only one parameter: a name. The function that will run when this service is scheduled is the one that carries the same name as the service itself.
The "GenericService" can be seen as a "job multiplexer" for simple scripts.

Let's take a look at how the ``Generic Service`` is implemented:

::

  class GenericService(Service):
  
      __tablename__ = 'GenericService'
  
      id = Column(Integer, ForeignKey('Service.id'), primary_key=True)
  
      __mapper_args__ = {
          'polymorphic_identity': 'generic_service',
      }
  
      def job(self, task, incoming_payload):
          return getattr(self, self.name)(task, incoming_payload)
  
      def job1(self, task, payload):
          return {'success': True, 'result': ''}
  
      def job2(self, task, payload):
          return {'success': True, 'result': ''}
  
      def job3(self, task, payload):
          return {'success': True, 'result': ''}

The ``job`` function of ``GenericService`` will run the class method of ``GenericService`` with the same name as the instance itself.
In other words, if you create an instance of ``GenericService`` called ``job1``, when that instance of ``GenericService`` is executed, the ``job1`` method of ``GenericService`` will run.
If you create an instance ``job2``, the ``job2`` method of ``GenericService`` will run, etc.
