========================
Swiss Army Knife Service
========================

eNMS automatically converts a service class into a form in the web UI. The fields of the form are automatically generated by inspecting the SQL parameters of the class.
This system only makes sense if multiple instances with different parameters of the same service are to be created.

Another use-case is to implement a service that will only exist as a single instance, and therefore does not need any variable parameter.
This can be done with the ``Swiss Army Knife Service``.

A "Swiss Army Knife Service" has only one parameter: a name. The function that will run when this service is scheduled is the one that carries the same name as the service itself.
The "SwissArmyKnifeService" can be seen as a "job multiplexer" for simple scripts.

Let's take a look at how the ``Swiss Army Knife Service`` is implemented:

::

  from sqlalchemy import Boolean, Column, ForeignKey, Integer
  
  from eNMS.automation.models import Service, service_classes
  
  
  class SwissArmyKnifeService(Service):
  
      __tablename__ = 'SwissArmyKnifeService'
  
      id = Column(Integer, ForeignKey('Service.id'), primary_key=True)
      has_targets = Column(Boolean)
  
      __mapper_args__ = {
          'polymorphic_identity': 'swiss_army_knife_service',
      }
  
      def job(self, *args):
          return getattr(self, self.name)(*args)
  
      # Instance call "job1" with has_targets set to True
      def job1(self, device, results, payload):
          return {'success': True, 'result': ''}
  
      # Instance call "job2" with has_targets set to False
      def job2(self, payload):
          return {'success': True, 'result': ''}
  
      def process_payload1(self, payload):
          get_int = payload['get_interfaces']
          r8_int = get_int['devices']['router8']['result']['get_interfaces']
          speed_fa0 = r8_int['FastEthernet0/0']['speed']
          speed_fa1 = r8_int['FastEthernet0/1']['speed']
          same_speed = speed_fa0 == speed_fa1
  
          get_facts = payload['get_facts']
          r8_facts = get_facts['devices']['router8']['result']['get_facts']
          uptime_less_than_50000 = r8_facts['uptime'] < 50000
          return {
              'success': True,
              'result': {
                  'same_speed_fa0_fa1': same_speed,
                  'uptime_less_5000': uptime_less_than_50000
              }
          }


service_classes['swiss_army_knife_service'] = SwissArmyKnifeService

The ``job`` function of ``SwissArmyKnifeService`` will run the class method of ``SwissArmyKnifeService`` with the same name as the instance itself.

In other words, with the above code, you can create two instances of SwissArmyKnifeService from the web UI: one named "job1" and the other named "job2". The SwissArmyKnifeService class will take care of calling the right "job" function based on the name of the instance.

Parralel Swiss Army Knife Service
---------------------------------

There is also a parallel version of the Swiss Army Knife Service:

::

  class ParallelSwissArmyKnifeService(Service):
  
      __tablename__ = 'ParallelSwissArmyKnifeService'
  
      id = Column(Integer, ForeignKey('Service.id'), primary_key=True)
  
      __mapper_args__ = {
          'polymorphic_identity': 'parallel_swiss_army_knife_service',
      }
  
      def job(self, workflow_results=None):
          targets = self.compute_targets()
          results = {'success': True, 'devices': {}}
          pool = ThreadPool(processes=len(targets))
          pool.map(
              getattr(self, self.name),
              [(device, workflow_results, results) for device in targets])
          pool.close()
          pool.join()
          return results
  
      def job1(self, args):
          device, payload, results = args
          results['devices'][device.name] = True
  
      def job2(self, args):
          device, payload, results = args
          results['devices'][device.name] = True
  
      def job3(self, args):
          device, payload, results = args
          results['devices'][device.name] = True
